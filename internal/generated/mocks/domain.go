// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"ef_project/internal/domain"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockSubscriptionsRepository creates a new instance of MockSubscriptionsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriptionsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriptionsRepository {
	mock := &MockSubscriptionsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSubscriptionsRepository is an autogenerated mock type for the SubscriptionsRepository type
type MockSubscriptionsRepository struct {
	mock.Mock
}

type MockSubscriptionsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriptionsRepository) EXPECT() *MockSubscriptionsRepository_Expecter {
	return &MockSubscriptionsRepository_Expecter{mock: &_m.Mock}
}

// AllMatchingSubscriptionsForPeriod provides a mock function for the type MockSubscriptionsRepository
func (_mock *MockSubscriptionsRepository) AllMatchingSubscriptionsForPeriod(context1 context.Context, connection domain.Connection, v domain.UserID, v1 domain.ServiceName, time1 time.Time, time11 *time.Time) ([]int, error) {
	ret := _mock.Called(context1, connection, v, v1, time1, time11)

	if len(ret) == 0 {
		panic("no return value specified for AllMatchingSubscriptionsForPeriod")
	}

	var r0 []int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.UserID, domain.ServiceName, time.Time, *time.Time) ([]int, error)); ok {
		return returnFunc(context1, connection, v, v1, time1, time11)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.UserID, domain.ServiceName, time.Time, *time.Time) []int); ok {
		r0 = returnFunc(context1, connection, v, v1, time1, time11)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Connection, domain.UserID, domain.ServiceName, time.Time, *time.Time) error); ok {
		r1 = returnFunc(context1, connection, v, v1, time1, time11)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionsRepository_AllMatchingSubscriptionsForPeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllMatchingSubscriptionsForPeriod'
type MockSubscriptionsRepository_AllMatchingSubscriptionsForPeriod_Call struct {
	*mock.Call
}

// AllMatchingSubscriptionsForPeriod is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - v domain.UserID
//   - v1 domain.ServiceName
//   - time1 time.Time
//   - time11 *time.Time
func (_e *MockSubscriptionsRepository_Expecter) AllMatchingSubscriptionsForPeriod(context1 interface{}, connection interface{}, v interface{}, v1 interface{}, time1 interface{}, time11 interface{}) *MockSubscriptionsRepository_AllMatchingSubscriptionsForPeriod_Call {
	return &MockSubscriptionsRepository_AllMatchingSubscriptionsForPeriod_Call{Call: _e.mock.On("AllMatchingSubscriptionsForPeriod", context1, connection, v, v1, time1, time11)}
}

func (_c *MockSubscriptionsRepository_AllMatchingSubscriptionsForPeriod_Call) Run(run func(context1 context.Context, connection domain.Connection, v domain.UserID, v1 domain.ServiceName, time1 time.Time, time11 *time.Time)) *MockSubscriptionsRepository_AllMatchingSubscriptionsForPeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 domain.UserID
		if args[2] != nil {
			arg2 = args[2].(domain.UserID)
		}
		var arg3 domain.ServiceName
		if args[3] != nil {
			arg3 = args[3].(domain.ServiceName)
		}
		var arg4 time.Time
		if args[4] != nil {
			arg4 = args[4].(time.Time)
		}
		var arg5 *time.Time
		if args[5] != nil {
			arg5 = args[5].(*time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockSubscriptionsRepository_AllMatchingSubscriptionsForPeriod_Call) Return(ints []int, err error) *MockSubscriptionsRepository_AllMatchingSubscriptionsForPeriod_Call {
	_c.Call.Return(ints, err)
	return _c
}

func (_c *MockSubscriptionsRepository_AllMatchingSubscriptionsForPeriod_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, v domain.UserID, v1 domain.ServiceName, time1 time.Time, time11 *time.Time) ([]int, error)) *MockSubscriptionsRepository_AllMatchingSubscriptionsForPeriod_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockSubscriptionsRepository
func (_mock *MockSubscriptionsRepository) Create(context1 context.Context, connection domain.Connection, subscription domain.Subscription) error {
	ret := _mock.Called(context1, connection, subscription)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.Subscription) error); ok {
		r0 = returnFunc(context1, connection, subscription)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptionsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSubscriptionsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - subscription domain.Subscription
func (_e *MockSubscriptionsRepository_Expecter) Create(context1 interface{}, connection interface{}, subscription interface{}) *MockSubscriptionsRepository_Create_Call {
	return &MockSubscriptionsRepository_Create_Call{Call: _e.mock.On("Create", context1, connection, subscription)}
}

func (_c *MockSubscriptionsRepository_Create_Call) Run(run func(context1 context.Context, connection domain.Connection, subscription domain.Subscription)) *MockSubscriptionsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 domain.Subscription
		if args[2] != nil {
			arg2 = args[2].(domain.Subscription)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSubscriptionsRepository_Create_Call) Return(err error) *MockSubscriptionsRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptionsRepository_Create_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, subscription domain.Subscription) error) *MockSubscriptionsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockSubscriptionsRepository
func (_mock *MockSubscriptionsRepository) Delete(context1 context.Context, connection domain.Connection, v domain.UserID, v1 domain.ServiceName) error {
	ret := _mock.Called(context1, connection, v, v1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.UserID, domain.ServiceName) error); ok {
		r0 = returnFunc(context1, connection, v, v1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptionsRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSubscriptionsRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - v domain.UserID
//   - v1 domain.ServiceName
func (_e *MockSubscriptionsRepository_Expecter) Delete(context1 interface{}, connection interface{}, v interface{}, v1 interface{}) *MockSubscriptionsRepository_Delete_Call {
	return &MockSubscriptionsRepository_Delete_Call{Call: _e.mock.On("Delete", context1, connection, v, v1)}
}

func (_c *MockSubscriptionsRepository_Delete_Call) Run(run func(context1 context.Context, connection domain.Connection, v domain.UserID, v1 domain.ServiceName)) *MockSubscriptionsRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 domain.UserID
		if args[2] != nil {
			arg2 = args[2].(domain.UserID)
		}
		var arg3 domain.ServiceName
		if args[3] != nil {
			arg3 = args[3].(domain.ServiceName)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockSubscriptionsRepository_Delete_Call) Return(err error) *MockSubscriptionsRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptionsRepository_Delete_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, v domain.UserID, v1 domain.ServiceName) error) *MockSubscriptionsRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatest provides a mock function for the type MockSubscriptionsRepository
func (_mock *MockSubscriptionsRepository) GetLatest(context1 context.Context, connection domain.Connection, v domain.UserID, v1 domain.ServiceName) (*time.Time, error) {
	ret := _mock.Called(context1, connection, v, v1)

	if len(ret) == 0 {
		panic("no return value specified for GetLatest")
	}

	var r0 *time.Time
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.UserID, domain.ServiceName) (*time.Time, error)); ok {
		return returnFunc(context1, connection, v, v1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.UserID, domain.ServiceName) *time.Time); ok {
		r0 = returnFunc(context1, connection, v, v1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*time.Time)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Connection, domain.UserID, domain.ServiceName) error); ok {
		r1 = returnFunc(context1, connection, v, v1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionsRepository_GetLatest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatest'
type MockSubscriptionsRepository_GetLatest_Call struct {
	*mock.Call
}

// GetLatest is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - v domain.UserID
//   - v1 domain.ServiceName
func (_e *MockSubscriptionsRepository_Expecter) GetLatest(context1 interface{}, connection interface{}, v interface{}, v1 interface{}) *MockSubscriptionsRepository_GetLatest_Call {
	return &MockSubscriptionsRepository_GetLatest_Call{Call: _e.mock.On("GetLatest", context1, connection, v, v1)}
}

func (_c *MockSubscriptionsRepository_GetLatest_Call) Run(run func(context1 context.Context, connection domain.Connection, v domain.UserID, v1 domain.ServiceName)) *MockSubscriptionsRepository_GetLatest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 domain.UserID
		if args[2] != nil {
			arg2 = args[2].(domain.UserID)
		}
		var arg3 domain.ServiceName
		if args[3] != nil {
			arg3 = args[3].(domain.ServiceName)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockSubscriptionsRepository_GetLatest_Call) Return(time1 *time.Time, err error) *MockSubscriptionsRepository_GetLatest_Call {
	_c.Call.Return(time1, err)
	return _c
}

func (_c *MockSubscriptionsRepository_GetLatest_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, v domain.UserID, v1 domain.ServiceName) (*time.Time, error)) *MockSubscriptionsRepository_GetLatest_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAllByUserID provides a mock function for the type MockSubscriptionsRepository
func (_mock *MockSubscriptionsRepository) ReadAllByUserID(context1 context.Context, connection domain.Connection, v domain.UserID) ([]domain.Subscription, error) {
	ret := _mock.Called(context1, connection, v)

	if len(ret) == 0 {
		panic("no return value specified for ReadAllByUserID")
	}

	var r0 []domain.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.UserID) ([]domain.Subscription, error)); ok {
		return returnFunc(context1, connection, v)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.UserID) []domain.Subscription); ok {
		r0 = returnFunc(context1, connection, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.Connection, domain.UserID) error); ok {
		r1 = returnFunc(context1, connection, v)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionsRepository_ReadAllByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAllByUserID'
type MockSubscriptionsRepository_ReadAllByUserID_Call struct {
	*mock.Call
}

// ReadAllByUserID is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - v domain.UserID
func (_e *MockSubscriptionsRepository_Expecter) ReadAllByUserID(context1 interface{}, connection interface{}, v interface{}) *MockSubscriptionsRepository_ReadAllByUserID_Call {
	return &MockSubscriptionsRepository_ReadAllByUserID_Call{Call: _e.mock.On("ReadAllByUserID", context1, connection, v)}
}

func (_c *MockSubscriptionsRepository_ReadAllByUserID_Call) Run(run func(context1 context.Context, connection domain.Connection, v domain.UserID)) *MockSubscriptionsRepository_ReadAllByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 domain.UserID
		if args[2] != nil {
			arg2 = args[2].(domain.UserID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSubscriptionsRepository_ReadAllByUserID_Call) Return(subscriptions []domain.Subscription, err error) *MockSubscriptionsRepository_ReadAllByUserID_Call {
	_c.Call.Return(subscriptions, err)
	return _c
}

func (_c *MockSubscriptionsRepository_ReadAllByUserID_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, v domain.UserID) ([]domain.Subscription, error)) *MockSubscriptionsRepository_ReadAllByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockSubscriptionsRepository
func (_mock *MockSubscriptionsRepository) Update(context1 context.Context, connection domain.Connection, subscription domain.Subscription) error {
	ret := _mock.Called(context1, connection, subscription)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Connection, domain.Subscription) error); ok {
		r0 = returnFunc(context1, connection, subscription)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptionsRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSubscriptionsRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1 context.Context
//   - connection domain.Connection
//   - subscription domain.Subscription
func (_e *MockSubscriptionsRepository_Expecter) Update(context1 interface{}, connection interface{}, subscription interface{}) *MockSubscriptionsRepository_Update_Call {
	return &MockSubscriptionsRepository_Update_Call{Call: _e.mock.On("Update", context1, connection, subscription)}
}

func (_c *MockSubscriptionsRepository_Update_Call) Run(run func(context1 context.Context, connection domain.Connection, subscription domain.Subscription)) *MockSubscriptionsRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Connection
		if args[1] != nil {
			arg1 = args[1].(domain.Connection)
		}
		var arg2 domain.Subscription
		if args[2] != nil {
			arg2 = args[2].(domain.Subscription)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSubscriptionsRepository_Update_Call) Return(err error) *MockSubscriptionsRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptionsRepository_Update_Call) RunAndReturn(run func(context1 context.Context, connection domain.Connection, subscription domain.Subscription) error) *MockSubscriptionsRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnection creates a new instance of MockConnection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnection {
	mock := &MockConnection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConnection is an autogenerated mock type for the Connection type
type MockConnection struct {
	mock.Mock
}

type MockConnection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnection) EXPECT() *MockConnection_Expecter {
	return &MockConnection_Expecter{mock: &_m.Mock}
}

// ExecContext provides a mock function for the type MockConnection
func (_mock *MockConnection) ExecContext(context1 context.Context, s string, vs ...any) (int64, error) {
	var tmpRet mock.Arguments
	if len(vs) > 0 {
		tmpRet = _mock.Called(context1, s, vs)
	} else {
		tmpRet = _mock.Called(context1, s)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ExecContext")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) (int64, error)); ok {
		return returnFunc(context1, s, vs...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) int64); ok {
		r0 = returnFunc(context1, s, vs...)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = returnFunc(context1, s, vs...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConnection_ExecContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecContext'
type MockConnection_ExecContext_Call struct {
	*mock.Call
}

// ExecContext is a helper method to define mock.On call
//   - context1 context.Context
//   - s string
//   - vs ...any
func (_e *MockConnection_Expecter) ExecContext(context1 interface{}, s interface{}, vs ...interface{}) *MockConnection_ExecContext_Call {
	return &MockConnection_ExecContext_Call{Call: _e.mock.On("ExecContext",
		append([]interface{}{context1, s}, vs...)...)}
}

func (_c *MockConnection_ExecContext_Call) Run(run func(context1 context.Context, s string, vs ...any)) *MockConnection_ExecContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConnection_ExecContext_Call) Return(n int64, err error) *MockConnection_ExecContext_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockConnection_ExecContext_Call) RunAndReturn(run func(context1 context.Context, s string, vs ...any) (int64, error)) *MockConnection_ExecContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetContext provides a mock function for the type MockConnection
func (_mock *MockConnection) GetContext(context1 context.Context, v any, s string, vs ...any) error {
	var tmpRet mock.Arguments
	if len(vs) > 0 {
		tmpRet = _mock.Called(context1, v, s, vs)
	} else {
		tmpRet = _mock.Called(context1, v, s)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetContext")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, string, ...any) error); ok {
		r0 = returnFunc(context1, v, s, vs...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnection_GetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContext'
type MockConnection_GetContext_Call struct {
	*mock.Call
}

// GetContext is a helper method to define mock.On call
//   - context1 context.Context
//   - v any
//   - s string
//   - vs ...any
func (_e *MockConnection_Expecter) GetContext(context1 interface{}, v interface{}, s interface{}, vs ...interface{}) *MockConnection_GetContext_Call {
	return &MockConnection_GetContext_Call{Call: _e.mock.On("GetContext",
		append([]interface{}{context1, v, s}, vs...)...)}
}

func (_c *MockConnection_GetContext_Call) Run(run func(context1 context.Context, v any, s string, vs ...any)) *MockConnection_GetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []any
		var variadicArgs []any
		if len(args) > 3 {
			variadicArgs = args[3].([]any)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockConnection_GetContext_Call) Return(err error) *MockConnection_GetContext_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnection_GetContext_Call) RunAndReturn(run func(context1 context.Context, v any, s string, vs ...any) error) *MockConnection_GetContext_Call {
	_c.Call.Return(run)
	return _c
}

// SelectContext provides a mock function for the type MockConnection
func (_mock *MockConnection) SelectContext(context1 context.Context, v any, s string, vs ...any) error {
	var tmpRet mock.Arguments
	if len(vs) > 0 {
		tmpRet = _mock.Called(context1, v, s, vs)
	} else {
		tmpRet = _mock.Called(context1, v, s)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for SelectContext")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, string, ...any) error); ok {
		r0 = returnFunc(context1, v, s, vs...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnection_SelectContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectContext'
type MockConnection_SelectContext_Call struct {
	*mock.Call
}

// SelectContext is a helper method to define mock.On call
//   - context1 context.Context
//   - v any
//   - s string
//   - vs ...any
func (_e *MockConnection_Expecter) SelectContext(context1 interface{}, v interface{}, s interface{}, vs ...interface{}) *MockConnection_SelectContext_Call {
	return &MockConnection_SelectContext_Call{Call: _e.mock.On("SelectContext",
		append([]interface{}{context1, v, s}, vs...)...)}
}

func (_c *MockConnection_SelectContext_Call) Run(run func(context1 context.Context, v any, s string, vs ...any)) *MockConnection_SelectContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []any
		var variadicArgs []any
		if len(args) > 3 {
			variadicArgs = args[3].([]any)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockConnection_SelectContext_Call) Return(err error) *MockConnection_SelectContext_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnection_SelectContext_Call) RunAndReturn(run func(context1 context.Context, v any, s string, vs ...any) error) *MockConnection_SelectContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConnectionProvider creates a new instance of MockConnectionProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionProvider {
	mock := &MockConnectionProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConnectionProvider is an autogenerated mock type for the ConnectionProvider type
type MockConnectionProvider struct {
	mock.Mock
}

type MockConnectionProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConnectionProvider) EXPECT() *MockConnectionProvider_Expecter {
	return &MockConnectionProvider_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockConnectionProvider
func (_mock *MockConnectionProvider) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnectionProvider_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConnectionProvider_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConnectionProvider_Expecter) Close() *MockConnectionProvider_Close_Call {
	return &MockConnectionProvider_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConnectionProvider_Close_Call) Run(run func()) *MockConnectionProvider_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConnectionProvider_Close_Call) Return(err error) *MockConnectionProvider_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnectionProvider_Close_Call) RunAndReturn(run func() error) *MockConnectionProvider_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function for the type MockConnectionProvider
func (_mock *MockConnectionProvider) Execute(context1 context.Context, fn func(context.Context, domain.Connection) error) error {
	ret := _mock.Called(context1, fn)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(context.Context, domain.Connection) error) error); ok {
		r0 = returnFunc(context1, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnectionProvider_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockConnectionProvider_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - context1 context.Context
//   - fn func(context.Context, domain.Connection) error
func (_e *MockConnectionProvider_Expecter) Execute(context1 interface{}, fn interface{}) *MockConnectionProvider_Execute_Call {
	return &MockConnectionProvider_Execute_Call{Call: _e.mock.On("Execute", context1, fn)}
}

func (_c *MockConnectionProvider_Execute_Call) Run(run func(context1 context.Context, fn func(context.Context, domain.Connection) error)) *MockConnectionProvider_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(context.Context, domain.Connection) error
		if args[1] != nil {
			arg1 = args[1].(func(context.Context, domain.Connection) error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConnectionProvider_Execute_Call) Return(err error) *MockConnectionProvider_Execute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnectionProvider_Execute_Call) RunAndReturn(run func(context1 context.Context, fn func(context.Context, domain.Connection) error) error) *MockConnectionProvider_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteTx provides a mock function for the type MockConnectionProvider
func (_mock *MockConnectionProvider) ExecuteTx(context1 context.Context, fn func(context.Context, domain.Connection) error) error {
	ret := _mock.Called(context1, fn)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteTx")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(context.Context, domain.Connection) error) error); ok {
		r0 = returnFunc(context1, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConnectionProvider_ExecuteTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteTx'
type MockConnectionProvider_ExecuteTx_Call struct {
	*mock.Call
}

// ExecuteTx is a helper method to define mock.On call
//   - context1 context.Context
//   - fn func(context.Context, domain.Connection) error
func (_e *MockConnectionProvider_Expecter) ExecuteTx(context1 interface{}, fn interface{}) *MockConnectionProvider_ExecuteTx_Call {
	return &MockConnectionProvider_ExecuteTx_Call{Call: _e.mock.On("ExecuteTx", context1, fn)}
}

func (_c *MockConnectionProvider_ExecuteTx_Call) Run(run func(context1 context.Context, fn func(context.Context, domain.Connection) error)) *MockConnectionProvider_ExecuteTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(context.Context, domain.Connection) error
		if args[1] != nil {
			arg1 = args[1].(func(context.Context, domain.Connection) error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConnectionProvider_ExecuteTx_Call) Return(err error) *MockConnectionProvider_ExecuteTx_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConnectionProvider_ExecuteTx_Call) RunAndReturn(run func(context1 context.Context, fn func(context.Context, domain.Connection) error) error) *MockConnectionProvider_ExecuteTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSubscriptionInterface creates a new instance of MockSubscriptionInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriptionInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriptionInterface {
	mock := &MockSubscriptionInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSubscriptionInterface is an autogenerated mock type for the SubscriptionInterface type
type MockSubscriptionInterface struct {
	mock.Mock
}

type MockSubscriptionInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriptionInterface) EXPECT() *MockSubscriptionInterface_Expecter {
	return &MockSubscriptionInterface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockSubscriptionInterface
func (_mock *MockSubscriptionInterface) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptionInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockSubscriptionInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockSubscriptionInterface_Expecter) Close() *MockSubscriptionInterface_Close_Call {
	return &MockSubscriptionInterface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockSubscriptionInterface_Close_Call) Run(run func()) *MockSubscriptionInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriptionInterface_Close_Call) Return(err error) *MockSubscriptionInterface_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptionInterface_Close_Call) RunAndReturn(run func() error) *MockSubscriptionInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockSubscriptionInterface
func (_mock *MockSubscriptionInterface) Create(context1 context.Context, subscription domain.Subscription) error {
	ret := _mock.Called(context1, subscription)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Subscription) error); ok {
		r0 = returnFunc(context1, subscription)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptionInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSubscriptionInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - subscription domain.Subscription
func (_e *MockSubscriptionInterface_Expecter) Create(context1 interface{}, subscription interface{}) *MockSubscriptionInterface_Create_Call {
	return &MockSubscriptionInterface_Create_Call{Call: _e.mock.On("Create", context1, subscription)}
}

func (_c *MockSubscriptionInterface_Create_Call) Run(run func(context1 context.Context, subscription domain.Subscription)) *MockSubscriptionInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Subscription
		if args[1] != nil {
			arg1 = args[1].(domain.Subscription)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubscriptionInterface_Create_Call) Return(err error) *MockSubscriptionInterface_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptionInterface_Create_Call) RunAndReturn(run func(context1 context.Context, subscription domain.Subscription) error) *MockSubscriptionInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockSubscriptionInterface
func (_mock *MockSubscriptionInterface) Delete(context1 context.Context, v domain.UserID, v1 domain.ServiceName) error {
	ret := _mock.Called(context1, v, v1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.ServiceName) error); ok {
		r0 = returnFunc(context1, v, v1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptionInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSubscriptionInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - v domain.UserID
//   - v1 domain.ServiceName
func (_e *MockSubscriptionInterface_Expecter) Delete(context1 interface{}, v interface{}, v1 interface{}) *MockSubscriptionInterface_Delete_Call {
	return &MockSubscriptionInterface_Delete_Call{Call: _e.mock.On("Delete", context1, v, v1)}
}

func (_c *MockSubscriptionInterface_Delete_Call) Run(run func(context1 context.Context, v domain.UserID, v1 domain.ServiceName)) *MockSubscriptionInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UserID
		if args[1] != nil {
			arg1 = args[1].(domain.UserID)
		}
		var arg2 domain.ServiceName
		if args[2] != nil {
			arg2 = args[2].(domain.ServiceName)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSubscriptionInterface_Delete_Call) Return(err error) *MockSubscriptionInterface_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptionInterface_Delete_Call) RunAndReturn(run func(context1 context.Context, v domain.UserID, v1 domain.ServiceName) error) *MockSubscriptionInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAllByUserID provides a mock function for the type MockSubscriptionInterface
func (_mock *MockSubscriptionInterface) ReadAllByUserID(context1 context.Context, v domain.UserID) ([]domain.Subscription, error) {
	ret := _mock.Called(context1, v)

	if len(ret) == 0 {
		panic("no return value specified for ReadAllByUserID")
	}

	var r0 []domain.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID) ([]domain.Subscription, error)); ok {
		return returnFunc(context1, v)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID) []domain.Subscription); ok {
		r0 = returnFunc(context1, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UserID) error); ok {
		r1 = returnFunc(context1, v)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionInterface_ReadAllByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAllByUserID'
type MockSubscriptionInterface_ReadAllByUserID_Call struct {
	*mock.Call
}

// ReadAllByUserID is a helper method to define mock.On call
//   - context1 context.Context
//   - v domain.UserID
func (_e *MockSubscriptionInterface_Expecter) ReadAllByUserID(context1 interface{}, v interface{}) *MockSubscriptionInterface_ReadAllByUserID_Call {
	return &MockSubscriptionInterface_ReadAllByUserID_Call{Call: _e.mock.On("ReadAllByUserID", context1, v)}
}

func (_c *MockSubscriptionInterface_ReadAllByUserID_Call) Run(run func(context1 context.Context, v domain.UserID)) *MockSubscriptionInterface_ReadAllByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UserID
		if args[1] != nil {
			arg1 = args[1].(domain.UserID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubscriptionInterface_ReadAllByUserID_Call) Return(subscriptions []domain.Subscription, err error) *MockSubscriptionInterface_ReadAllByUserID_Call {
	_c.Call.Return(subscriptions, err)
	return _c
}

func (_c *MockSubscriptionInterface_ReadAllByUserID_Call) RunAndReturn(run func(context1 context.Context, v domain.UserID) ([]domain.Subscription, error)) *MockSubscriptionInterface_ReadAllByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// TotalSubscriptionsCost provides a mock function for the type MockSubscriptionInterface
func (_mock *MockSubscriptionInterface) TotalSubscriptionsCost(context1 context.Context, v domain.UserID, v1 domain.ServiceName, time1 time.Time, time11 *time.Time) (int, error) {
	ret := _mock.Called(context1, v, v1, time1, time11)

	if len(ret) == 0 {
		panic("no return value specified for TotalSubscriptionsCost")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.ServiceName, time.Time, *time.Time) (int, error)); ok {
		return returnFunc(context1, v, v1, time1, time11)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.UserID, domain.ServiceName, time.Time, *time.Time) int); ok {
		r0 = returnFunc(context1, v, v1, time1, time11)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.UserID, domain.ServiceName, time.Time, *time.Time) error); ok {
		r1 = returnFunc(context1, v, v1, time1, time11)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionInterface_TotalSubscriptionsCost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalSubscriptionsCost'
type MockSubscriptionInterface_TotalSubscriptionsCost_Call struct {
	*mock.Call
}

// TotalSubscriptionsCost is a helper method to define mock.On call
//   - context1 context.Context
//   - v domain.UserID
//   - v1 domain.ServiceName
//   - time1 time.Time
//   - time11 *time.Time
func (_e *MockSubscriptionInterface_Expecter) TotalSubscriptionsCost(context1 interface{}, v interface{}, v1 interface{}, time1 interface{}, time11 interface{}) *MockSubscriptionInterface_TotalSubscriptionsCost_Call {
	return &MockSubscriptionInterface_TotalSubscriptionsCost_Call{Call: _e.mock.On("TotalSubscriptionsCost", context1, v, v1, time1, time11)}
}

func (_c *MockSubscriptionInterface_TotalSubscriptionsCost_Call) Run(run func(context1 context.Context, v domain.UserID, v1 domain.ServiceName, time1 time.Time, time11 *time.Time)) *MockSubscriptionInterface_TotalSubscriptionsCost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.UserID
		if args[1] != nil {
			arg1 = args[1].(domain.UserID)
		}
		var arg2 domain.ServiceName
		if args[2] != nil {
			arg2 = args[2].(domain.ServiceName)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		var arg4 *time.Time
		if args[4] != nil {
			arg4 = args[4].(*time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockSubscriptionInterface_TotalSubscriptionsCost_Call) Return(n int, err error) *MockSubscriptionInterface_TotalSubscriptionsCost_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockSubscriptionInterface_TotalSubscriptionsCost_Call) RunAndReturn(run func(context1 context.Context, v domain.UserID, v1 domain.ServiceName, time1 time.Time, time11 *time.Time) (int, error)) *MockSubscriptionInterface_TotalSubscriptionsCost_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockSubscriptionInterface
func (_mock *MockSubscriptionInterface) Update(context1 context.Context, subscription domain.Subscription) error {
	ret := _mock.Called(context1, subscription)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.Subscription) error); ok {
		r0 = returnFunc(context1, subscription)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptionInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSubscriptionInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1 context.Context
//   - subscription domain.Subscription
func (_e *MockSubscriptionInterface_Expecter) Update(context1 interface{}, subscription interface{}) *MockSubscriptionInterface_Update_Call {
	return &MockSubscriptionInterface_Update_Call{Call: _e.mock.On("Update", context1, subscription)}
}

func (_c *MockSubscriptionInterface_Update_Call) Run(run func(context1 context.Context, subscription domain.Subscription)) *MockSubscriptionInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.Subscription
		if args[1] != nil {
			arg1 = args[1].(domain.Subscription)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSubscriptionInterface_Update_Call) Return(err error) *MockSubscriptionInterface_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptionInterface_Update_Call) RunAndReturn(run func(context1 context.Context, subscription domain.Subscription) error) *MockSubscriptionInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}
