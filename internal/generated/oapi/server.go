// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// MessageResponse defines model for MessageResponse.
type MessageResponse struct {
	Message string `json:"message"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	Cost      int                `json:"cost"`
	DateEnd   *string            `json:"dateEnd,omitempty"`
	DateStart string             `json:"dateStart"`
	Id        openapi_types.UUID `json:"id"`
	Name      string             `json:"name"`
}

// TotalCostResponse defines model for TotalCostResponse.
type TotalCostResponse struct {
	TotalCost int `json:"totalCost"`
}

// GetAllParams defines parameters for GetAll.
type GetAllParams struct {
	// Id ID пользователя
	Id *openapi_types.UUID `form:"id,omitempty" json:"id,omitempty"`
}

// DeleteSubscriptionsParams defines parameters for DeleteSubscriptions.
type DeleteSubscriptionsParams struct {
	// Id ID пользователя
	Id openapi_types.UUID `form:"id" json:"id"`

	// Name Название подписки
	Name string `form:"name" json:"name"`
}

// GetSubscriptionsParams defines parameters for GetSubscriptions.
type GetSubscriptionsParams struct {
	// Id ID пользователя
	Id *openapi_types.UUID `form:"id,omitempty" json:"id,omitempty"`
}

// GetSubscriptionsTotalCostParams defines parameters for GetSubscriptionsTotalCost.
type GetSubscriptionsTotalCostParams struct {
	Id        *openapi_types.UUID `form:"id,omitempty" json:"id,omitempty"`
	Name      *string             `form:"name,omitempty" json:"name,omitempty"`
	StartDate string              `form:"startDate" json:"startDate"`
	EndDate   string              `form:"endDate" json:"endDate"`
}

// PostSubscriptionsJSONRequestBody defines body for PostSubscriptions for application/json ContentType.
type PostSubscriptionsJSONRequestBody = Subscription

// PutSubscriptionsJSONRequestBody defines body for PutSubscriptions for application/json ContentType.
type PutSubscriptionsJSONRequestBody = Subscription

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение списка подписок
	// (GET /all)
	GetAll(c *gin.Context, params GetAllParams)
	// Удаление подписки
	// (DELETE /subscriptions)
	DeleteSubscriptions(c *gin.Context, params DeleteSubscriptionsParams)
	// Получение последней подписки
	// (GET /subscriptions)
	GetSubscriptions(c *gin.Context, params GetSubscriptionsParams)
	// Создание новой подписки
	// (POST /subscriptions)
	PostSubscriptions(c *gin.Context)
	// Обновление подписки
	// (PUT /subscriptions)
	PutSubscriptions(c *gin.Context)
	// Подсчёт суммарной стоимости подписок за период
	// (GET /subscriptions/total_cost)
	GetSubscriptionsTotalCost(c *gin.Context, params GetSubscriptionsTotalCostParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAll operation middleware
func (siw *ServerInterfaceWrapper) GetAll(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllParams

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", c.Request.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAll(c, params)
}

// DeleteSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscriptions(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteSubscriptionsParams

	// ------------- Required query parameter "id" -------------

	if paramValue := c.Query("id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", c.Request.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "name" -------------

	if paramValue := c.Query("name"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument name is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSubscriptions(c, params)
}

// GetSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptions(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsParams

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", c.Request.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSubscriptions(c, params)
}

// PostSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) PostSubscriptions(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostSubscriptions(c)
}

// PutSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) PutSubscriptions(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutSubscriptions(c)
}

// GetSubscriptionsTotalCost operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptionsTotalCost(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubscriptionsTotalCostParams

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", c.Request.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "startDate" -------------

	if paramValue := c.Query("startDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument startDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "startDate", c.Request.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter startDate: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "endDate" -------------

	if paramValue := c.Query("endDate"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument endDate is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "endDate", c.Request.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter endDate: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSubscriptionsTotalCost(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/all", wrapper.GetAll)
	router.DELETE(options.BaseURL+"/subscriptions", wrapper.DeleteSubscriptions)
	router.GET(options.BaseURL+"/subscriptions", wrapper.GetSubscriptions)
	router.POST(options.BaseURL+"/subscriptions", wrapper.PostSubscriptions)
	router.PUT(options.BaseURL+"/subscriptions", wrapper.PutSubscriptions)
	router.GET(options.BaseURL+"/subscriptions/total_cost", wrapper.GetSubscriptionsTotalCost)
}

type GetAllRequestObject struct {
	Params GetAllParams
}

type GetAllResponseObject interface {
	VisitGetAllResponse(w http.ResponseWriter) error
}

type GetAll200JSONResponse []Subscription

func (response GetAll200JSONResponse) VisitGetAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAll400JSONResponse MessageResponse

func (response GetAll400JSONResponse) VisitGetAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscriptionsRequestObject struct {
	Params DeleteSubscriptionsParams
}

type DeleteSubscriptionsResponseObject interface {
	VisitDeleteSubscriptionsResponse(w http.ResponseWriter) error
}

type DeleteSubscriptions200JSONResponse MessageResponse

func (response DeleteSubscriptions200JSONResponse) VisitDeleteSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscriptions400JSONResponse MessageResponse

func (response DeleteSubscriptions400JSONResponse) VisitDeleteSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsRequestObject struct {
	Params GetSubscriptionsParams
}

type GetSubscriptionsResponseObject interface {
	VisitGetSubscriptionsResponse(w http.ResponseWriter) error
}

type GetSubscriptions200JSONResponse Subscription

func (response GetSubscriptions200JSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions400JSONResponse MessageResponse

func (response GetSubscriptions400JSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostSubscriptionsRequestObject struct {
	Body *PostSubscriptionsJSONRequestBody
}

type PostSubscriptionsResponseObject interface {
	VisitPostSubscriptionsResponse(w http.ResponseWriter) error
}

type PostSubscriptions201JSONResponse MessageResponse

func (response PostSubscriptions201JSONResponse) VisitPostSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostSubscriptions400JSONResponse MessageResponse

func (response PostSubscriptions400JSONResponse) VisitPostSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutSubscriptionsRequestObject struct {
	Body *PutSubscriptionsJSONRequestBody
}

type PutSubscriptionsResponseObject interface {
	VisitPutSubscriptionsResponse(w http.ResponseWriter) error
}

type PutSubscriptions200JSONResponse MessageResponse

func (response PutSubscriptions200JSONResponse) VisitPutSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutSubscriptions400JSONResponse MessageResponse

func (response PutSubscriptions400JSONResponse) VisitPutSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsTotalCostRequestObject struct {
	Params GetSubscriptionsTotalCostParams
}

type GetSubscriptionsTotalCostResponseObject interface {
	VisitGetSubscriptionsTotalCostResponse(w http.ResponseWriter) error
}

type GetSubscriptionsTotalCost200JSONResponse TotalCostResponse

func (response GetSubscriptionsTotalCost200JSONResponse) VisitGetSubscriptionsTotalCostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsTotalCost400JSONResponse MessageResponse

func (response GetSubscriptionsTotalCost400JSONResponse) VisitGetSubscriptionsTotalCostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Получение списка подписок
	// (GET /all)
	GetAll(ctx context.Context, request GetAllRequestObject) (GetAllResponseObject, error)
	// Удаление подписки
	// (DELETE /subscriptions)
	DeleteSubscriptions(ctx context.Context, request DeleteSubscriptionsRequestObject) (DeleteSubscriptionsResponseObject, error)
	// Получение последней подписки
	// (GET /subscriptions)
	GetSubscriptions(ctx context.Context, request GetSubscriptionsRequestObject) (GetSubscriptionsResponseObject, error)
	// Создание новой подписки
	// (POST /subscriptions)
	PostSubscriptions(ctx context.Context, request PostSubscriptionsRequestObject) (PostSubscriptionsResponseObject, error)
	// Обновление подписки
	// (PUT /subscriptions)
	PutSubscriptions(ctx context.Context, request PutSubscriptionsRequestObject) (PutSubscriptionsResponseObject, error)
	// Подсчёт суммарной стоимости подписок за период
	// (GET /subscriptions/total_cost)
	GetSubscriptionsTotalCost(ctx context.Context, request GetSubscriptionsTotalCostRequestObject) (GetSubscriptionsTotalCostResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAll operation middleware
func (sh *strictHandler) GetAll(ctx *gin.Context, params GetAllParams) {
	var request GetAllRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAll(ctx, request.(GetAllRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAll")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAllResponseObject); ok {
		if err := validResponse.VisitGetAllResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSubscriptions operation middleware
func (sh *strictHandler) DeleteSubscriptions(ctx *gin.Context, params DeleteSubscriptionsParams) {
	var request DeleteSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubscriptions(ctx, request.(DeleteSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteSubscriptionsResponseObject); ok {
		if err := validResponse.VisitDeleteSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscriptions operation middleware
func (sh *strictHandler) GetSubscriptions(ctx *gin.Context, params GetSubscriptionsParams) {
	var request GetSubscriptionsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscriptions(ctx, request.(GetSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSubscriptionsResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSubscriptions operation middleware
func (sh *strictHandler) PostSubscriptions(ctx *gin.Context) {
	var request PostSubscriptionsRequestObject

	var body PostSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostSubscriptions(ctx, request.(PostSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostSubscriptionsResponseObject); ok {
		if err := validResponse.VisitPostSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutSubscriptions operation middleware
func (sh *strictHandler) PutSubscriptions(ctx *gin.Context) {
	var request PutSubscriptionsRequestObject

	var body PutSubscriptionsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutSubscriptions(ctx, request.(PutSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutSubscriptionsResponseObject); ok {
		if err := validResponse.VisitPutSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscriptionsTotalCost operation middleware
func (sh *strictHandler) GetSubscriptionsTotalCost(ctx *gin.Context, params GetSubscriptionsTotalCostParams) {
	var request GetSubscriptionsTotalCostRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscriptionsTotalCost(ctx, request.(GetSubscriptionsTotalCostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscriptionsTotalCost")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetSubscriptionsTotalCostResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionsTotalCostResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xXzY4bRRB+lVHDcYidBYQ0N2ARygEJsdySCPXO1G4mzF+6eyKs1Uix95ADkVY8AEQR",
	"LzBYtmyytvcVqt8IVbf/Z2blhDjZzclWT3XXV1Vf/Z0xP42zNIFESeadMek/gpibvz+AlPwUfgKZpYkE",
	"OspEmoFQIRiB2ArQX9XJgHlMKhEmp6woXCbgSR4KCJh3fyn40F0IpsePwVescNlRfix9EWYqTJOqCj+V",
	"au39MFFwCoLuBVzBd0lAH+E3HmcRfQ+44s5JKmKunAes/dVnB+2DLx8w5m4DtPePFBfqrV8IjXIryzyW",
	"52FQJ5bweAcXGSnX2mueXkdY57efU8Wjb1OpmuOjFiJ1HtzSv5KtKiPZMDlJ6ZkA1qLF8BUO9TPs41h3",
	"HRzgpb5w9Dle6WdYYh8vcYhTHOsLB69whgO8IkF8jSVOcEzOCpXx+jH3f4UkcCSIp6FPjngKQlodd++0",
	"77TJ4jSDhGch89jn5shlGVePjKUtHkX0ewrGVnICJ4j3Auax70F9HUVGXPAYFAjJvPvbptw7tCAv9Qsc",
	"4Qz7WOoeDskkCgiJPMlBdNgiojZINl92IELxkBxuQ2UwH7TbluGJgsTA5lkWhb4B3nosbTqs3g8VxObi",
	"pwJOmMc+aa0ytzVP29ZGNhVLEFwI3rGBrATQxmSGrzeDtDyoc0jhsi/eEP51qLcrTR3QP3GIfcO2qf4d",
	"/3VwhKUh2kx3DZtlHsdcdEj2pYF9rp9b/uHQ0d0V9yp2mustueY6aakegYIqnw7N+dGG+H7ItUpQJXJ4",
	"E7K5Z1X/lTgixXOPbGXkuAHHvC41I3nXNP+/PHm5WWioHA2wnJei8qYz9+81sLVRKtzGIvc+GPn+yt3u",
	"Va6eBLpr3DjAqb6oaUAfUW0jS1bW4pAeqKFNNh8ENnnzYyorxKFkB6m+SYPOHkO2WVKKCl3uftiyQZ1h",
	"ZLLxFpSNV2tgDSWmhtSzJirkdUzIbygRPmz/wBn+M3fnLekhf20Bru8jlZGnZVaAXxYb105dZrmEVNvN",
	"O2gh7tl1I0nzCNJwT9IudcjV9fPMW6yCTQohCfaibp+ttbpW1m4N+hwnOMGSCIklbX1d3cMZjnFClNQ9",
	"/aJmzL75nXWgu/q5/kP3yKB1G6mUbtuI45qVaWRnC1I5pm8Eq/gvAAD//+bUtrNmEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
